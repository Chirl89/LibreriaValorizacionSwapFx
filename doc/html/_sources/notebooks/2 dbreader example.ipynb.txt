{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Uso de lector de base de datos\n",
    "\n",
    "El lector de base de datos permite obtener datos directamente de la base de datos oficial utilizando queries predefinidas y transformando los datos en objetos propios de la librería\n",
    "\n",
    "## Carga de librerías"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-11T20:36:24.668306900Z",
     "start_time": "2023-10-11T20:36:23.571643200Z"
    }
   },
   "outputs": [],
   "source": [
    "from finrisklib.data.dbreader import DBReader # Lector de Base de datos\n",
    "from finrisklib.enums import FinancialIndex\n",
    "from finrisklib.enums import Source\n",
    "from IPython.display import display # Formateo\n",
    "from datetime import date"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inicialización de lector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-11T20:36:24.674686900Z",
     "start_time": "2023-10-11T20:36:24.674686900Z"
    }
   },
   "outputs": [],
   "source": [
    "reader = DBReader()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Datos de Curvas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-11T20:36:25.170593400Z",
     "start_time": "2023-10-11T20:36:24.674686900Z"
    }
   },
   "outputs": [],
   "source": [
    "curve_name = 'CLP fx'\n",
    "process_date = date(year=2022, month=8, day=23)\n",
    "\n",
    "curve = reader.get_single_curve_data(curve_name=curve_name, process_date=process_date, source=Source.SANDBOX)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a) Mostrar como factores de descuento"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-11T20:36:25.196587300Z",
     "start_time": "2023-10-11T20:36:25.170593400Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "      Tenor  Discount Factor\n0       8.0         0.998063\n1      15.0         0.995990\n2      34.0         0.991161\n3      63.0         0.981989\n4      94.0         0.973400\n5     126.0         0.964291\n6     155.0         0.955910\n7     188.0         0.947108\n8     275.0         0.926399\n9     367.0         0.906843\n10    552.0         0.879410\n11    736.0         0.849496\n12   1100.0         0.806704\n13   1465.0         0.769472\n14   1830.0         0.730337\n15   2198.0         0.695461\n16   2563.0         0.666686\n17   2927.0         0.634250\n18   3291.0         0.605523\n19   3657.0         0.578067\n20   4389.0         0.533318\n21   5483.0         0.474120\n22   7309.0         0.408970\n23  10963.0         0.337719",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Tenor</th>\n      <th>Discount Factor</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8.0</td>\n      <td>0.998063</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>0.995990</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>34.0</td>\n      <td>0.991161</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>63.0</td>\n      <td>0.981989</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>94.0</td>\n      <td>0.973400</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>126.0</td>\n      <td>0.964291</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>155.0</td>\n      <td>0.955910</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>188.0</td>\n      <td>0.947108</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>275.0</td>\n      <td>0.926399</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>367.0</td>\n      <td>0.906843</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>552.0</td>\n      <td>0.879410</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>736.0</td>\n      <td>0.849496</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1100.0</td>\n      <td>0.806704</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>1465.0</td>\n      <td>0.769472</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>1830.0</td>\n      <td>0.730337</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>2198.0</td>\n      <td>0.695461</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>2563.0</td>\n      <td>0.666686</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>2927.0</td>\n      <td>0.634250</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>3291.0</td>\n      <td>0.605523</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>3657.0</td>\n      <td>0.578067</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>4389.0</td>\n      <td>0.533318</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>5483.0</td>\n      <td>0.474120</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>7309.0</td>\n      <td>0.408970</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>10963.0</td>\n      <td>0.337719</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = curve.to_dataframe()\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### b) Mostrar como tasas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-11T20:36:25.240095900Z",
     "start_time": "2023-10-11T20:36:25.206720900Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "      Tenor     Rates\n0       8.0  0.091191\n1      15.0  0.101231\n2      34.0  0.098571\n3      63.0  0.109446\n4      94.0  0.108770\n5     126.0  0.109480\n6     155.0  0.110409\n7     188.0  0.109667\n8     275.0  0.105259\n9     367.0  0.100672\n10    552.0  0.087419\n11    736.0  0.083052\n12   1100.0  0.072828\n13   1465.0  0.066513\n14   1830.0  0.063770\n15   2198.0  0.061288\n16   2563.0  0.058600\n17   2927.0  0.057598\n18   3291.0  0.056410\n19   3657.0  0.055434\n20   4389.0  0.052915\n21   5483.0  0.050220\n22   7309.0  0.045023\n23  10963.0  0.036290",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Tenor</th>\n      <th>Rates</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8.0</td>\n      <td>0.091191</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>0.101231</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>34.0</td>\n      <td>0.098571</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>63.0</td>\n      <td>0.109446</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>94.0</td>\n      <td>0.108770</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>126.0</td>\n      <td>0.109480</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>155.0</td>\n      <td>0.110409</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>188.0</td>\n      <td>0.109667</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>275.0</td>\n      <td>0.105259</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>367.0</td>\n      <td>0.100672</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>552.0</td>\n      <td>0.087419</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>736.0</td>\n      <td>0.083052</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1100.0</td>\n      <td>0.072828</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>1465.0</td>\n      <td>0.066513</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>1830.0</td>\n      <td>0.063770</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>2198.0</td>\n      <td>0.061288</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>2563.0</td>\n      <td>0.058600</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>2927.0</td>\n      <td>0.057598</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>3291.0</td>\n      <td>0.056410</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>3657.0</td>\n      <td>0.055434</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>4389.0</td>\n      <td>0.052915</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>5483.0</td>\n      <td>0.050220</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>7309.0</td>\n      <td>0.045023</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>10963.0</td>\n      <td>0.036290</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = curve.rates_to_dataframe()\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Datos de tipos de cambio"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a) Obtención de tipo de cambio definiendo dos monedas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-11T20:36:25.570010800Z",
     "start_time": "2023-10-11T20:36:25.224437500Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.99795\n"
     ]
    }
   ],
   "source": [
    "primary_currency = 'EUR'\n",
    "secondary_currency = 'USD'\n",
    "\n",
    "process_date = date(year=2022, month=8, day=23)\n",
    "\n",
    "tc = reader.get_fx_rate(primary_currency=primary_currency, secondary_currency=secondary_currency,\n",
    "                        process_date=process_date, source=Source.SANDBOX)\n",
    "\n",
    "print(tc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Datos de índices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-11T20:36:26.296236600Z",
     "start_time": "2023-10-11T20:36:25.570010800Z"
    }
   },
   "outputs": [],
   "source": [
    "sofr = FinancialIndex.SOFR\n",
    "icp = FinancialIndex.ICP\n",
    "\n",
    "start_date = date(year=2022, month=8, day=1)\n",
    "end_date = date(year=2022, month=8, day=23)\n",
    "\n",
    "icp_data = reader.get_single_index_dataset(index=icp, start_date=start_date, end_date=end_date)\n",
    "sofr_data = reader.get_single_index_dataset(index=sofr, start_date=start_date, end_date=end_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-11T20:36:26.317251Z",
     "start_time": "2023-10-11T20:36:26.296236600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "20040.63"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "idx_date = date(year=2022, month=8, day=10)\n",
    "display(icp_data.get_index_data(index=icp, idx_date=idx_date))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-11T20:36:26.317251Z",
     "start_time": "2023-10-11T20:36:26.312509600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "0.0229"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "idx_date = date(year=2022, month=8, day=9)\n",
    "display(sofr_data.get_index_data(index=sofr, idx_date=idx_date))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
